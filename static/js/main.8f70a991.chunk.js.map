{"version":3,"sources":["Path.js","Property.js","Utils.js","Properties.js","Editor.js","index.js"],"names":["Path","className","onClick","json","JSON","stringify","props","model","ta","document","createElement","value","body","appendChild","select","execCommand","removeChild","title","onNavigate","this","name","path","map","item","index","key","slice","React","Component","Property","state","setState","property","onChange","TextField","type","label","margin","fullWidth","e","update","target","FormControl","InputLabel","Select","input","Input","MenuItem","substr","Utils","root","reduce","current","undefined","Properties","node","locate","Object","entries","v","concat","ProjectLinks","href","Editor","dropbox","window","location","hash","match","accessToken","localStorage","dropboxAccessToken","dropboxReadDir","assign","Dropbox","filesListFolder","join","then","response","folders","filter","files","catch","error","console","log","dropboxOpen","url","clientId","getAuthenticationUrl","id","onDrop","onDragOver","style","padding","Button","welcomeScreen","List","folder","ListItem","button","ListItemIcon","ListItemText","primary","file","filesDownload","reader","FileReader","addEventListener","load","parse","result","readAsText","fileBlob","dropboxReadFile","navigate","filesUpload","mode","contents","properties","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8f70a991.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Path extends React.Component {\n    render() {\n      const copy = () => {\n        const json = JSON.stringify(this.props.model, null, 2);\n        const ta = document.createElement('textarea');\n        ta.value = json;\n        document.body.appendChild(ta);\n        ta.select();\n        document.execCommand('copy');\n        document.body.removeChild(ta);\n      };\n  \n      const renderPathItem = (item, index) => {\n        return (\n          <li key={index}>\n            <span onClick={() =>\n              this.props.onNavigate(this.props.path.slice(0, index+1))}>{item}</span>\n          </li>\n        );\n      };\n\n      return (\n        <div className=\"path\">\n          <span className=\"copy\" onClick={copy} title=\"copy model to clipboard\">\n            <i className=\"fas fa-copy\"></i>\n          </span>\n          <ul>\n            <li><span onClick={() => this.props.onNavigate([])}>{this.props.name}</span></li>\n            {this.props.path.map(renderPathItem)}</ul>\n        </div>\n      );\n    }\n  }\n  ","import React from 'react';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\n\nexport default class Property extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = { value : props.value };\n    }\n  \n    update(value) {\n      this.setState({ value : value });\n      this.props.model[this.props.property] = value;\n      this.props.onChange();\n    }\n  \n    render() {\n      switch (typeof this.state.value) {\n        case 'string':\n          return (\n            <TextField type=\"text\"\n              label={this.props.label}\n              value={this.state.value}\n              margin=\"normal\"\n              fullWidth\n              onChange={e => this.update(e.target.value)}/>\n          );\n        case 'number':\n          return (\n            <TextField type=\"text\"\n              label={this.props.label}\n              value={this.state.value}\n              margin=\"normal\"\n              onChange={e => this.update(e.target.value)} />\n          );\n        case 'boolean':\n          return (\n            <FormControl margin=\"normal\">\n              <InputLabel>{this.props.label}</InputLabel>\n              <Select value={this.state.value ? 'true' : 'false'}\n                input={<Input/>}\n                onChange={e => this.update(e.target.value === 'true')}>\n                <MenuItem value={'true'}>true</MenuItem>\n                <MenuItem value={'false'}>false</MenuItem>\n              </Select>\n            </FormControl>\n          );\n        case 'object':\n          return (\n            <TextField\n              label={this.props.label}\n              margin=\"normal\"\n              fullWidth\n              value={JSON.stringify(this.state.value).substr(0, 1024)}\n              onClick={() => this.props.onNavigate(this.props.path)}\n            />\n          );\n      }\n    }\n  }","export default class Utils {\n  static locate(root, path) {\n    return path.reduce((current, item) => current ? current[item] : undefined, root);\n  }\n}","import React from 'react';\n\nimport Property from './Property.js';\nimport Utils from './Utils.js';\n\nexport default class Properties extends React.Component {\n  render() {\n    const path = this.props.path;\n    const node = Utils.locate(this.props.model, path);\n    return (\n      <div className=\"props\">\n        {Object.entries(node).map(v => (\n          <div key={v[0]}>\n            <Property\n              path={path.concat([v[0]])}\n              model={node}\n              property={v[0]}\n              label={v[0]}\n              value={v[1]}\n              onNavigate={path => this.props.onNavigate(path)}\n              onChange={() => this.props.onChange()}/>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport { Dropbox } from 'dropbox';\n\nimport Path from './Path.js';\nimport Properties from './Properties.js';\n\nclass FilesDropBucket extends React.Component {\n  onDragOver(e) {\n    e.preventDefault();\n  }\n\n  onDrop(e) {\n    e.preventDefault();\n\n    const updateModelFromFile = file => {\n      const reader = new FileReader();\n      reader.onload = e => this.load(file.name, JSON.parse(e.target.result));\n      reader.readAsText(file);\n    }\n  \n    if (e.dataTransfer.items) {\n      for (let i = 0; i < e.dataTransfer.items.length; i++) {\n        if (e.dataTransfer.items[i].kind === 'file') {\n          let file = e.dataTransfer.items[i].getAsFile();\n          updateModelFromFile(e.dataTransfer.files[i]);\n          break;\n        }\n      }\n    } else {\n      for (let i = 0; i < e.dataTransfer.files.length; i++) {\n        updateModelFromFile(e.dataTransfer.files[i]);\n        break;\n      }\n    }\n\n    if (e.dataTransfer.items) {\n      e.dataTransfer.items.clear();\n    } else {\n      e.dataTransfer.clearData();\n    }\n  }\n}\n\nclass ProjectLinks extends React.Component {\n  render() {\n    const sourceCodeLink = () =>\n      <a href=\"https://github.com/AlexAtNet/modelx\">source code</a>;\n    const featuresLink = () =>\n      <a href=\"https://github.com/AlexAtNet/modelx/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aclosed+is%3Aenhancement\">features</a>;\n    const issuesLink = () =>\n      <a href=\"https://github.com/AlexAtNet/modelx/issues\">issues</a>;\n    return (\n      <p>{sourceCodeLink()} ~ {featuresLink()} ~ {issuesLink()}</p>\n    );\n  }\n}\n\nexport default class Editor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { model : null, dropbox : null };\n\n    // model : { location : null, root : null, path : null }\n    // dropbox : { accessKey : null, path : '/', folders : [], files : [] }\n    const [, accessToken ] = window.location.hash.match(/access_token=([^&]+)/) || [];\n    if (accessToken) {\n      localStorage.dropboxAccessToken = accessToken;\n      this.dropboxReadDir([]);\n    }\n  }\n\n  navigate(path) {\n    this.setState({ model : Object.assign({}, this.state.model, { path : path }) });\n  }\n\n  load(location, root) {\n    this.setState({ model : { location, root, path : [ ] } });\n  }\n\n  dropboxReadDir(path) {\n    const dbx = new Dropbox({ accessToken : localStorage.dropboxAccessToken });\n    dbx.filesListFolder({ path : path.map(v => '/' + v).join('') })\n      .then(response => {\n        const folders = response.entries.filter(e => e['.tag'] === 'folder').map(e => e.name);\n        const files = response.entries.filter(e => e['.tag'] === 'file').map(e => e.name);\n        this.setState({ dropbox : { path, folders, files } });\n      })\n      .catch(error => console.log(error));\n  }\n\n  render() {\n    const dropboxReadFile = path => {\n      const location = path.map(v => '/' + v).join('');\n      const dbx = new Dropbox({ accessToken : localStorage.dropboxAccessToken });\n      dbx.filesDownload({ path : location })\n        .then(response => {\n          const reader = new FileReader();\n          reader.addEventListener('loadend', () => {\n            this.load(location, JSON.parse(reader.result));\n          });\n          reader.readAsText(response.fileBlob);\n        })\n        .catch(error => console.log(error));\n    };\n\n    const dropboxWriteFile = () => {\n      const dbx = new Dropbox({ accessToken : localStorage.dropboxAccessToken });\n      dbx.filesUpload({\n        path : this.state.model.location,\n        mode : { '.tag' : 'overwrite' },\n        contents : JSON.stringify(this.state.model.root, null, 2)\n      }).then(() => console.log('saved')).catch(error => console.log(error));\n    };\n\n    const dropboxOpen = () => {\n      if (localStorage.dropboxAccessToken) {\n        this.dropboxReadDir([]);\n      } else {\n        const url = new Dropbox({ clientId : 'dlc05g8hb4ebuem' })\n          .getAuthenticationUrl(window.location);\n        window.location = url;\n      }\n    };\n\n    const dropbox = () => {\n      const dropbox = this.state.dropbox;\n      if (!dropbox || this.state.model) return;\n      return (\n        <List>\n          {dropbox.folders.map(folder => (\n            <ListItem button key={folder}\n              onClick={() => this.dropboxReadDir(dropbox.path.concat([folder]))}>\n              <ListItemIcon><i className=\"fas fa-folder\"></i></ListItemIcon>\n              <ListItemText primary={folder} />\n            </ListItem>\n          ))}\n          {dropbox.files.map(file => (\n            <ListItem button key={file}\n              onClick={() => dropboxReadFile(dropbox.path.concat([file]))}>\n              <ListItemIcon><i className=\"fas fa-file\"></i></ListItemIcon>\n              <ListItemText primary={file} />\n            </ListItem>\n          ))}\n        </List>\n      );\n    }\n\n    const path = () => {\n      const model = this.state.model;\n      if (!model) return;\n      return <Path name={model.location} path={model.path} model={model.root}\n          onNavigate={path => this.navigate(path)} />;\n    };\n\n    const properties = () => {\n      const model = this.state.model;\n      if (!model) return;\n      return <Properties path={model.path} model={model.root}\n          onNavigate={path => this.navigate(path)}\n          onChange={() => dropboxWriteFile() } />;\n    };\n\n    const welcomeScreen = (model, dropbox) => {\n      if (this.state.model || this.state.dropbox) return;\n      return (\n        <div style={{ padding : '1rem' }}>\n          <p>Edit JSON model files in:</p>\n          <div><Button onClick={dropboxOpen}>Dropbox</Button></div>\n          <ProjectLinks/>\n        </div>\n      );\n    };\n\n    return (\n      <div id=\"editor\"\n        onDrop={e => this.onDrop(e)}\n        onDragOver={e => this.onDragOver(e)}>\n        {welcomeScreen()}\n        {dropbox()}\n        {path()}\n        {properties()}\n      </div>\n    );\n  }\n}\n    ","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor from './Editor.js';\n\nimport './index.css';\n\nReactDOM.render(\n  <Editor />,\n  document.getElementById('root')\n);\n  "],"sourceRoot":""}